// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DapperDoe.Views.Content = (function(_super) {
    __extends(Content, _super);

    function Content() {
      return Content.__super__.constructor.apply(this, arguments);
    }

    Content.prototype.events = {
      "click": "stopPropagation"
    };

    Content.prototype.stopPropagation = function(e) {
      return e.stopPropagation();
    };

    return Content;

  })(Backbone.View);

  DapperDoe.Views.Toolbar = (function(_super) {
    __extends(Toolbar, _super);

    function Toolbar() {
      return Toolbar.__super__.constructor.apply(this, arguments);
    }

    Toolbar.prototype.events = {
      "click": "stopPropagation"
    };

    Toolbar.prototype.stopPropagation = function(e) {
      return e.stopPropagation();
    };

    return Toolbar;

  })(Backbone.View);

  DapperDoe.Views.Content.Text = (function(_super) {
    __extends(Text, _super);

    function Text() {
      return Text.__super__.constructor.apply(this, arguments);
    }

    Text.prototype.events = {
      "focus": "showToolbar"
    };

    Text.prototype.initialize = function() {
      this.events = _.extend({}, DapperDoe.Views.Content.prototype.events, this.events);
      return this.$el.attr('contenteditable', 'true');
    };

    Text.prototype.showToolbar = function(e) {
      return this.toolbar = new DapperDoe.Views.Toolbar.Text({
        content: this
      });
    };

    return Text;

  })(DapperDoe.Views.Content);

  DapperDoe.Views.Content.Image = (function(_super) {
    __extends(Image, _super);

    function Image() {
      return Image.__super__.constructor.apply(this, arguments);
    }

    Image.prototype.initialize = function() {
      this.events = _.extend({}, DapperDoe.Views.Content.prototype.events, this.events);
      return this.tools = new DapperDoe.Views.Tools.Image({
        image: this.$el
      });
    };

    Image.prototype.hideTools = function(e) {
      if (!this.$el.is(':hover')) {
        return this.tools.remove();
      }
    };

    return Image;

  })(DapperDoe.Views.Content);

  DapperDoe.Views.Tools = (function(_super) {
    __extends(Tools, _super);

    function Tools() {
      return Tools.__super__.constructor.apply(this, arguments);
    }

    return Tools;

  })(Backbone.View);

  DapperDoe.Views.Tools.Image = (function(_super) {
    __extends(Image, _super);

    function Image() {
      this.uploadImage = __bind(this.uploadImage, this);
      return Image.__super__.constructor.apply(this, arguments);
    }

    Image.prototype.events = {
      "click .image_upload": "selectFile",
      "mouseover": function() {
        return this.$tools.show();
      },
      "mouseout": function() {
        return this.$tools.hide();
      },
      "change .image_input": "uploadImage"
    };

    Image.prototype.initialize = function(options) {
      this.$image = options.image;
      this.$image.wrap('<div class="dd_image_wrapper"></div>');
      this.setElement(this.$image.parent('.dd_image_wrapper'));
      this.$el.append(this.html);
      this.$tools = this.$el.find('.dd_tools');
      this.positionTools();
      return this.$tools.hide();
    };

    Image.prototype.selectFile = function() {
      return this.$tools.find(".image_input").trigger("click");
    };

    Image.prototype.uploadImage = function(e) {
      var file, reader;
      if (e.target.files && e.target.files[0]) {
        file = e.target.files[0];
        if (file.type.match('image.*')) {
          reader = new FileReader();
          reader.onload = (function(_this) {
            return function(o) {
              _this.$image.attr('src', o.target.result);
              return _this.positionTools();
            };
          })(this);
          return reader.readAsDataURL(file);
        } else {
          return alert('Type de fichier non autoris√©');
        }
      }
    };

    Image.prototype.positionTools = function() {
      this.$tools.css('left', (this.$image.width() / 2) - (this.$el.find('.dd_tools').width() / 2));
      return this.$tools.css('top', (this.$image.height() / 2) - (this.$el.find('.dd_tools').height() / 2));
    };

    Image.prototype.remove = function() {
      this.$image.parent('.dd_image_wrapper').find('div').remove();
      return this.$image.unwrap();
    };

    Image.prototype.html = function() {
      return "<span class='dd_tools'> <i class='image_link fa fa-link'></i><br/> <i class='image_upload fa fa-image'></i> <input type='file' class='image_input' style='display: none;'/> </span>";
    };

    return Image;

  })(DapperDoe.Views.Tools);

  DapperDoe.Views.Toolbar.Text = (function(_super) {
    __extends(Text, _super);

    function Text() {
      this.editText = __bind(this.editText, this);
      return Text.__super__.constructor.apply(this, arguments);
    }

    Text.prototype.events = {
      "click button": "editText"
    };

    Text.prototype.initialize = function(options) {
      this.content = options.content;
      this.events = _.extend({}, DapperDoe.Views.Toolbar.prototype.events, this.events);
      window.app.snippetsView.removeToolbars();
      this.$el.html(this.html);
      return $(window.app.topElement).append(this.$el);
    };

    Text.prototype.editText = function(e) {
      window.app.lastSel = rangy.saveSelection();
      switch ($(e.currentTarget).data('action')) {
        case "bold":
          return document.execCommand('bold', false, null);
        case "italic":
          return document.execCommand('italic', false, null);
        case "underline":
          return document.execCommand('underline', false, null);
        case "text-color":
          return new DapperDoe.Views.Modal.Color({
            callback: this.applyForeColor
          });
        case "background-color":
          return new DapperDoe.Views.Modal.Color({
            callback: this.applyHiliteColor
          });
        case "align-left":
          return document.execCommand('justifyLeft', false, null);
        case "align-center":
          return document.execCommand('justifyCenter', false, null);
        case "align-right":
          return document.execCommand('justifyRight', false, null);
        case "link":
          return new DapperDoe.Views.Modal.Url();
        case "unlink":
          return document.execCommand('unlink', false, null);
        case "list":
          return document.execCommand('insertUnorderedList', false, null);
        case "clear":
          document.execCommand('removeFormat', false, null);
          return document.execCommand('unlink', false, null);
        case "undo":
          return document.execCommand('undo', false, null);
      }
    };

    Text.prototype.html = function() {
      return $("<div class='dd_toolbar'> <button data-action='bold'><i class='fa fa-bold'></i></button> <button data-action='italic'><i class='fa fa-italic'></i></button> <button data-action='underline'><i class='fa fa-underline'></i></button> <button data-action='text-color'><i class='fa fa-paint-brush'></i></button> <button data-action='background-color'><i class='fa fa-tint'></i></button> <button data-action='align-left'><i class='fa fa-align-left'></i></button> <button data-action='align-center'><i class='fa fa-align-center'></i></button> <button data-action='align-right'><i class='fa fa-align-right'></i></button> <button data-action='link'><i class='fa fa-link'></i></button> <button data-action='unlink'><i class='fa fa-unlink'></i></button> <button data-action='list'><i class='fa fa-list-ul'></i></button> <button data-action='clear'><i class='fa fa-eraser'></i></button> <button data-action='undo'><i class='fa fa-undo'></i></button> </div>");
    };

    Text.prototype.applyForeColor = function(color) {
      rangy.restoreSelection(app.lastSel);
      return document.execCommand('foreColor', false, color);
    };

    Text.prototype.applyHiliteColor = function(color) {
      rangy.restoreSelection(app.lastSel);
      return document.execCommand('hiliteColor', false, color);
    };

    return Text;

  })(DapperDoe.Views.Toolbar);

  DapperDoe.Views.Modal = (function(_super) {
    __extends(Modal, _super);

    function Modal() {
      return Modal.__super__.constructor.apply(this, arguments);
    }

    Modal.prototype.events = {
      "click": "stopPropagation",
      "click .dd_submit_modal": "doAction",
      "click .dd_close_modal": "closeModal"
    };

    Modal.prototype.initialize = function(options) {
      this.$el.html(this.html);
      return $(window.app.topElement).append(this.$el);
    };

    Modal.prototype.closeModal = function() {
      return this.$el.remove();
    };

    Modal.prototype.stopPropagation = function(e) {
      return e.stopPropagation();
    };

    Modal.prototype.html = function() {
      return $("<div class='dd_modal_overlay'> <div class='dd_modal'> <span class='dd_close_modal'><i class='fa fa-close'></i></span> <div class='dd_content'> </div> </div> </div>");
    };

    return Modal;

  })(Backbone.View);

  DapperDoe.Views.Modal.Color = (function(_super) {
    __extends(Color, _super);

    function Color() {
      this.html = __bind(this.html, this);
      return Color.__super__.constructor.apply(this, arguments);
    }

    Color.prototype.events = {
      "click .color": "doAction"
    };

    Color.prototype.initialize = function(options) {
      Color.__super__.initialize.call(this);
      this.events = _.extend({}, DapperDoe.Views.Modal.prototype.events, this.events);
      return this.callback = options.callback;
    };

    Color.prototype.doAction = function(e) {
      var color;
      color = $(e.target).data('color');
      this.callback(color);
      return this.closeModal();
    };

    Color.prototype.colorLuminance = function(hex, lum) {
      var c, i, rgb, _i;
      hex = String(hex).replace(/[^0-9a-f]/gi, '');
      if (hex.length < 6) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }
      lum = lum || 0;
      rgb = "";
      for (i = _i = 0; _i <= 2; i = _i += 1) {
        c = parseInt(hex.substr(i * 2, 2), 16);
        c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
        rgb += ("00" + c).substr(c.length);
      }
      return rgb;
    };

    Color.prototype.html = function() {
      var $html, baseColor, color, colorName, i, _i, _ref;
      $html = Color.__super__.html.call(this);
      $html.find('.dd_content').append("<table class='dd_color_palette'></table>");
      _ref = window.app.colorPalette;
      for (baseColor in _ref) {
        colorName = _ref[baseColor];
        $html.find('.dd_color_palette').append("<tr class='base_color_" + baseColor + "'></tr>");
        for (i = _i = -2; _i <= 3; i = _i += 1) {
          color = this.colorLuminance(baseColor, i * 0.3);
          $html.find(".dd_color_palette .base_color_" + baseColor).append("<td class='color' style='background: #" + color + ";' data-color='" + color + "'></td>");
        }
      }
      return $html;
    };

    return Color;

  })(DapperDoe.Views.Modal);

  DapperDoe.Views.Modal.Url = (function(_super) {
    __extends(Url, _super);

    function Url() {
      return Url.__super__.constructor.apply(this, arguments);
    }

    Url.prototype.doAction = function() {
      var cssApplier, cssClass, key, option, _ref;
      this.url = this.$el.find('.dd_url').val();
      this.blank = this.$el.find('.dd_blank').is(':checked');
      this.button = this.$el.find('.dd_button').is(':checked');
      rangy.restoreSelection(app.lastSel);
      this.link = document.execCommand('createLink', false, this.url);
      if (this.blank) {
        rangy.getSelection().getRangeAt(0).commonAncestorContainer.parentNode.setAttribute("target", "_blank");
      }
      if (this.button) {
        cssClass = window.app.buttonClass;
        _ref = window.app.buttonOptions;
        for (key in _ref) {
          option = _ref[key];
          cssClass += " " + this.$el.find("input[name=" + key + "]:checked").val();
        }
        cssApplier = rangy.createCssClassApplier(cssClass, {
          normalize: true,
          elementTagName: 'a'
        });
        cssApplier.toggleSelection();
      }
      return this.closeModal();
    };

    Url.prototype.html = function() {
      var $html, key, klass, name, option, _ref;
      $html = Url.__super__.html.call(this);
      $html.find('.dd_content').append("<input type='text' placeholder='Url' class='dd_url' /> <div class='dd_options'> <label> Target blank <input type='checkbox' class='dd_blank'/> </label> <div class='dd_button_options'> <b>Button <input type='checkbox' class='dd_button'/></b> </div> </div> <input type='submit' value='OK' class='dd_submit_modal'/>");
      _ref = window.app.buttonOptions;
      for (key in _ref) {
        option = _ref[key];
        $html.find('.dd_button_options').append("<div class='dd_button_option " + key + "'></div>");
        for (klass in option) {
          name = option[klass];
          $html.find(".dd_button_options .dd_button_option." + key).append("<label> " + name + " <input type='radio' name='" + key + "' value='" + klass + "' /> </label>");
        }
        console.log($html.find("input[name=" + key + "]:first"));
        $html.find("input[name=" + key + "]:first").attr('checked', true);
      }
      return $html;
    };

    return Url;

  })(DapperDoe.Views.Modal);

}).call(this);
